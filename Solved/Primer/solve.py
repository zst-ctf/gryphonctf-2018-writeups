#!/usr/bin/env python3
from Crypto.PublicKey import RSA
from Crypto.Util import asn1
import binascii

# Given
e = 65537
n = 17969491597941066732916128449573246156367561808012600070888918835531726460341490933493372247868650755230855864199929221814436684722874052065257937495694348389263171152522525654410980819170611742509702440718010364831638288518852689
c = 12650226166637863867560363533499766237358701046634563719052405002192446617919712657469309141320528246752895772120739612594607025120266155292477503995681993027121380247878972370366585379342735011039141909903119903877799592002611198
p = 3968132623150957588532394439049887341769533966621957829426966084093049516953598120833228447171744337427374763106901
q = 4528450358010492026612439739120166758911246047493700040073956759261590397250033699357694507193523000343088601688589

# Calculate
phi = (p-1) * (q-1)

def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    g, y, x = egcd(b%a,a)
    return (g, x - (b//a) * y, y)

def modinv(a, m):
    g, x, y = egcd(a, m)
    if g != 1:
        raise Exception('No modular inverse')
    return x%m

d = modinv(e, phi)

# get plaintext
priv_key = RSA.construct((n, e, d))
m = priv_key.decrypt(c)
print(m)

# If you convert the last plaintext to a hex number, then ascii, you'll find what you're searching for ;)
def hex_pair(x):
    return ('0' * (len(x) % 2)) + x

m_hex = '{:x}'.format(m)
m_hex = hex_pair(m_hex)
msg = binascii.unhexlify(m_hex)
print(msg.decode())
